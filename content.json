{"meta":{"title":"WinterTitle","subtitle":null,"description":null,"author":"Winter","url":"https://github.com/b348068721","root":"/"},"pages":[],"posts":[{"title":"SDWebImage项目中的应用","slug":"SDWebImage实际应用","date":"2019-03-12T14:56:03.108Z","updated":"2019-03-13T15:24:08.631Z","comments":true,"path":"2019/03/12/SDWebImage实际应用/","link":"","permalink":"https://github.com/b348068721/2019/03/12/SDWebImage实际应用/","excerpt":"","text":"我们在面试中常被问到知名三方库的使用原理，我们经常认为这些原理对我们真正工作当时的帮助不大，但是随着项目不断迭代，对APP的性能及稳定提出越来越多的要求。我们逐渐会接触到通过三方库原理去思考使用三方库的策略来方便开发。这篇描述的是一个SDWebImage的使用案例。 安装与简单使用安装cocoaPods-&gt;Podfile12platform :ios, &apos;7.0&apos;pod &apos;SDWebImage&apos;, &apos;~&gt; 4.0&apos; 简单使用引入头文件1#import &lt;SDWebImage/UIImageView+WebCache.h&gt; 加载网络图片12[imageView sd_setImageWithURL:[NSURL URLWithString:@\"http://www.domain.com/path/to/image.jpg\"]placeholderImage:[UIImage imageNamed:@\"placeholder.png\"]]; 项目中使用对于SDImageCache的应用阅读源码我们发现SDImageCache类负责管理内存缓存和磁盘缓存，为了方便调用它提供了一个单例sharedImageCache，之前也都是一直使用这个方法，但是遇到这个需求后变化就来了。 情景即时聊天，要求做图片缓存（类似微信），要求每个conversation以conversationId为文件夹名字，将当前conversation中的图片存入该文件夹中，并且在不使用一键清除缓存的情况下，图片一致保留。 SDImageCache方案默认的路径1沙盒中的Cache 默认的缓存方案1234先清除已超过最大缓存时间的缓存文件（最大缓存时间默认为一星期）在第一轮清除的过程中保存文件属性，特别是缓存文件大小在第一轮清除后，如果设置了最大缓存并且保留下来的磁盘缓存文件仍然超过了配置的最大缓存，那么进行第二轮以大小为基础的清除。首先删除最老的文件，直到达到期望的总的缓存大小，即最大缓存的一半。 情景方案路径在SDImageCache的头文件中1234567891011121314151617181920212223/*** Returns global shared cache instance** @return SDImageCache global instance*/+ (nonnull instancetype)sharedImageCache;/*** Init a new cache store with a specific namespace** @param ns The namespace to use for this cache store*/- (nonnull instancetype)initWithNamespace:(nonnull NSString *)ns;/*** Init a new cache store with a specific namespace and directory** @param ns The namespace to use for this cache store* @param directory Directory to cache disk images in*/- (nonnull instancetype)initWithNamespace:(nonnull NSString *)nsdiskCacheDirectory:(nonnull NSString *)directory NS_DESIGNATED_INITIALIZER; 使用这些来创建另外的命名空间 缓存方案仿照SDImageCache的实现进行修改，删除缓存的时间及清除12345678910111213141516/*** Clear all memory cached images*/- (void)clearMemory;/*** Async clear all disk cached images. Non-blocking method - returns immediately.* @param completion A block that should be executed after cache expiration completes (optional)*/- (void)clearDiskOnCompletion:(nullable SDWebImageNoParamsBlock)completion;/*** Async remove all expired cached image from disk. Non-blocking method - returns immediately.* @param completionBlock A block that should be executed after cache expiration completes (optional)*/- (void)deleteOldFilesWithCompletionBlock:(nullable SDWebImageNoParamsBlock)completionBlock;","categories":[],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://github.com/b348068721/tags/Objective-C/"},{"name":"markdown","slug":"markdown","permalink":"https://github.com/b348068721/tags/markdown/"},{"name":"SDWebImage","slug":"SDWebImage","permalink":"https://github.com/b348068721/tags/SDWebImage/"}]},{"title":"建站成功","slug":"helloworld","date":"2019-03-12T14:56:03.108Z","updated":"2019-03-12T15:53:07.948Z","comments":true,"path":"2019/03/12/helloworld/","link":"","permalink":"https://github.com/b348068721/2019/03/12/helloworld/","excerpt":"","text":"代码没写出什么花样，但是花边没少看，这是借助hexo、github创建的个人站，花的时间不多，值得玩玩。建站步骤 安装Node.jsGit 安装完成执行命令(速度慢换镜像！)1$ npm install -g hexo-cli 建站1234$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 自定义自己的站（高玩都是自己写，可惜我只会套用） _config.yml文件的配置 选一个喜欢的themes 配置themes,注意themes中也有一个_config.yml别弄混了 生成1$ hexo generate 或1$ hexo g 发布本地(到这只能自己爽)1$ hexo server 或1$ hexo s 部署（到这才是显摆）注册登录Github，建库（respositories），名称为user.git.io,如xxxx.git.io找到个人站下的_config.yml,修改部署信息123deploy: type: git repo: https://github.com/user/user.github.io.git 最后执行 1$ hexo deploy 或1$ hexo d","categories":[],"tags":[{"name":"markdown","slug":"markdown","permalink":"https://github.com/b348068721/tags/markdown/"},{"name":"hexo","slug":"hexo","permalink":"https://github.com/b348068721/tags/hexo/"}]}]}